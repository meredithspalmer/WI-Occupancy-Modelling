# Project: WI Occupancy Range Wide Trends

# This file contains code to explore both the species data (e.g. number of record per 
# species) and the covariate data (e.g. correlation among covariates).

# Set wd
rm(list=ls()); gc()
setwd("/gpfs/gibbs/pi/jetz/projects/WildlifeInsights")

# Load libraries
library(tidyverse)
library(lubridate)
library(arrow)
library(ggforce)
library(Hmisc)
library(purrr)
library(sf)
library(rworldmap)
library(countrycode)
library(taxize)

# Load data
overview_seq <- open_dataset("WI data/sequences_updated_20240710_parquet")
overview_images <- open_dataset("WI data/images_updated_20240714_parquet")

# Species data exploration ---------------------------------------------------------------
# summarize data for sequence and image projects
summ_seq <- overview_seq %>% 
  mutate(record_date = sequence_date_fix,
         sensor_start_date = ymd_hms(sensor_start_date_and_time),
         year = year(sensor_start_date)) %>% 
  group_by(class, Accepted_MOL) %>% 
  collect() %>%
  summarise(n_records = n(),
            n_locs = length(unique(deployment_location_id)),
            n_projects = length(unique(project_id)),
            n_years = length(unique(year)),
            min_record_date = min(record_date),
            max_record_date = max(record_date)) 
summ_images <- overview_images %>% 
  mutate(record_date = photo_date,
         sensor_start_date = ymd_hms(sensor_start_date_and_time),
         year = year(sensor_start_date)) %>% 
  group_by(class, Accepted_MOL) %>% 
  collect() %>%
  summarise(n_records = n(),
            n_locs = length(unique(deployment_location_id)),
            n_projects = length(unique(project_id)),
            n_years = length(unique(year)),
            min_record_date = min(record_date),
            max_record_date = max(record_date)) 

# bring all summaries together
summ_all <- rbind(summ_seq, summ_images) %>% 
  group_by(class, Accepted_MOL) %>% 
  summarise(n_records = sum(n_records),
            n_locs = sum(n_locs),
            n_projects = sum(n_projects),
            #n_days = length(unique(record_date)),
            max_n_years = max(n_years),
            min_record_date = min(min_record_date),
            max_record_date = max(max_record_date)) %>% 
  filter(class != "class") %>% 
  mutate(min_record_date = as.Date(min_record_date),
         max_record_date = as.Date(max_record_date))
write.csv(summ_all, file = "output/Data_exploration/Species/Summary_data_all_species.csv")

## For paper: 
summ_seq_2 <- overview_seq %>% select(latitude, longitude, class, sp_binomial) %>% distinct() %>% as.data.frame()
summ_img_2 <- overview_images %>% select(latitude, longitude, class, Accepted_MOL) %>% rename(sp_binomial = Accepted_MOL) %>% distinct() %>% as.data.frame()
paper_summ <- rbind(summ_seq_2, summ_img_2) %>% 
  mutate(latitude = as.numeric(latitude), 
         longitude = as.numeric(longitude))
paper_summ <- na.omit(paper_summ)

# ... want number of countries, continents:  
coords <- paper_summ[, c("longitude", "latitude")]
coords <- as.data.frame(lapply(coords, as.numeric))
coords <- na.omit(coords) #one row
sp_points <- SpatialPoints(coords, proj4string = CRS("+proj=longlat +datum=WGS84"))
world_map <- getMap(resolution = "low")
countries <- over(sp_points, world_map)$ADMIN
continents <- countrycode(countries, origin = "country.name", destination = "continent")
unique_countries <- unique(na.omit(countries))
unique_continents <- unique(na.omit(continents))
length(unique_countries) #111
length(unique_continents) #6

# ... want number of orders, families, genera: 
species <- unique(paper_summ$sp_binomial)
classifications <- classification(species, db = "itis")
result <- lapply(classifications, function(x) {
  data.frame(
    order  = x$name[x$rank == "order"],
    family = x$name[x$rank == "family"],
    genus  = x$name[x$rank == "genus"]
  )
})
do.call(rbind, result)
head(result)
print(length(unique(result$order)))
print(length(unique(result$family)))
print(length(unique(result$genus)))


## Summary visualization -------------------------------------------------------
### number of species by class -------------------------------------------------
table(summ_all$class)

### scatterplots ---------------------------------------------------------------
pairs(summ_all[, 3:6])

### n_project vs max_n_years
summ_all %>% 
  mutate(n_projects_cut = cut(n_projects, breaks = c(1, 10, 20, 50, 100, 200, max(summ_all$n_projects)), 
                              include.lowest = TRUE),
         max_n_years_cut = cut(max_n_years, breaks = c(1, 5, 10, 20, max(summ_all$max_n_years)),
                               include.lowest = TRUE)) %>% 
  group_by(class, n_projects_cut, max_n_years_cut) %>% 
  summarize(n_species = n()) %>% 
  ggplot(., aes(x = str_to_title(n_projects_cut), 
                y = str_to_title(max_n_years_cut), 
                colour = str_to_title(n_projects_cut),
                size = n_species)) +
  geom_point() +
  geom_text(aes(label = n_species), 
            colour = "white", 
            size = 3) +
  scale_x_discrete(limits = levels(summ_all_summ$n_projects_cut), position = "top") +
  scale_y_discrete(limits = levels(summ_all_summ$max_n_years_cut)) +
  scale_size_continuous(range = c(10, 30)) + # Adjust as required.
  scale_color_brewer(palette = "Set2") +
  labs(x = "# Projects", y = "Max # Years") +
  theme(legend.position = "none",
        panel.background = element_blank(),
        panel.grid = element_blank(),
        axis.ticks = element_blank()) +
  facet_grid(~class)
ggsave(filename = "figures/All_n_proj_vs_max_n_years.jpg",
       dpi = 600, units = "cm", height = 28, width = 19)

### Species by max_n_years -----------------------------------------------------
summ_mammals <- summ_all %>% 
  filter(class == "Mammalia")
for (i in unique(summ_mammals$max_n_years)) {
  #dev.new()
  print( 
    ggplot(summ_mammals[summ_mammals$max_n_years == i, ], aes(y = reorder(Accepted_MOL, max_n_years))) +
      geom_errorbar(aes(xmin = year(min_record_date), xmax = year(max_record_date), color = as.factor(max_n_years))) +
      theme_bw() +
      theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
            plot.title = element_text(size = 15, face = "bold"),
            strip.text.y = element_text(angle = 270, face = "bold"),
            strip.placement = "outside",
            axis.title.x = element_text(margin = margin(t = 0.5, b = 0.5, unit = "cm")),
            axis.title.y = element_blank(),
            axis.text = element_text(size = 10),
            legend.position = "none",
            panel.grid.major.y = element_blank(),
            strip.text.y.right = element_text(angle = 0),
            strip.background = element_blank(),
            panel.border = element_blank())
  )
  filename_plot = paste0("figures/Species_by_max_n_years/Mammals_first_to_last_record_by_species_max_", i, "yrs.jpg")
  ggsave(filename = filename_plot,
         dpi = 600, units = "cm", height = 28, width = 19)
}

summ_birds <- summ_all %>% 
  filter(class == "Aves")
for (i in unique(summ_birds$max_n_years)) {
  #dev.new()
  print( 
    ggplot(summ_birds[summ_birds$max_n_years == i, ], aes(y = reorder(Accepted_MOL, max_n_years))) +
      geom_errorbar(aes(xmin = year(min_record_date), xmax = year(max_record_date), color = as.factor(max_n_years))) +
      theme_bw() +
      theme(plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = "cm"),
            plot.title = element_text(size = 15, face = "bold"),
            strip.text.y = element_text(angle = 270, face = "bold"),
            strip.placement = "outside",
            axis.title.x = element_text(margin = margin(t = 0.5, b = 0.5, unit = "cm")),
            axis.title.y = element_blank(),
            axis.text = element_text(size = 10),
            legend.position = "none",
            panel.grid.major.y = element_blank(),
            strip.text.y.right = element_text(angle = 0),
            strip.background = element_blank(),
            panel.border = element_blank())
  )
  filename_plot = paste0("figures/Species_by_max_n_years/Birds_first_to_last_record_by_species_max_", i, "yrs.jpg")
  ggsave(filename = filename_plot,
         dpi = 600, units = "cm", height = 28, width = 19)
}


# Explore effort
eff <- data.frame(active_depl = colSums(cam_op, na.rm = TRUE), sampl_date = as.Date(colnames(cam_op)))
ggplot() +
  geom_col(data = eff, aes(x = sampl_date, y = active_depl), col = "royalblue") +
  geom_vline(xintercept = c(periods$start_period, periods$end_period[nrow(periods)]), linetype = "dashed",
             color = "grey56") +
  labs(x = "Date", y = "Number of active deployments", title = species) +
  theme_bw()
#ggsave(filename = "figures/Effort.jpg", device = "jpeg", units = "cm", 
#       width = 50, height = 40, dpi = 300)


# Covariates data exploration --------------------------------------------------

# Values reported for each covariate were extracted at the 10x10 kmsq cells 
# corresponding to the locations sampled in latest WI data freeze (24-Sep-2024)

# Load libraries
library(tidyverse)
library(corrplot)
library(ezknitr)
library(inspectdf)
library(corrr)
library(correlation)

# Load data -------------------------------------------------------------------
(cov_files <- list.files("Covariates for modelling"))

# Static covariates 
static_covs <- read.csv("Covariates for modelling/site_level_covariates.csv")
glimpse(static_covs)
summary(static_covs)

# Annual covariates 
crop <- read.csv("Covariates for modelling/primary_occ_covariates_crop.csv")
urban <- read.csv("Covariates for modelling/primary_occ_covariates_urban.csv")
gpw <- read.csv("Covariates for modelling/primary_occ_covariates_GPW.csv")
gfc <- read.csv("Covariates for modelling/primary_occ_covariates_GFC.csv") %>% select(-X)
precip <- read.csv("Covariates for modelling/primary_occ_covariates_precip.csv")
precseas <- read.csv("Covariates for modelling/primary_occ_covariates_precseas.csv")
warmseas <- read.csv("Covariates for modelling/primary_occ_covariates_warmseas.csv")
temp <- read.csv("Covariates for modelling/primary_occ_covariates_temp.csv")
wdpa <- read.csv("Covariates for modelling/primary_occ_covariates_wdpa.csv")
evi <- read.csv("Covariates for modelling/primary_occ_covariates_EVI.csv") %>% select(-X)

# Correlation and skewness by group -------------------------------------------

# Correlation among static covariates ---
correlation::correlation(static_covs[,c(2:length(static_covs))], 
                         include_factors = TRUE, method = "auto")
rcorr(as.matrix(static_covs[,c(2:length(static_covs))])) 

pairs(static_covs[,c(2:length(static_covs))])

cor_val <- cor(static_covs %>% select(-cell_ID) %>% drop_na())
corrplot(cor_val, method = "number", type = "upper", diag = FALSE, mar = c(1, 1, 1, 1))

cor_val %>% GGally::ggpairs(upper=list(continuous='points'), lower=list(continuous='cor'))

# Skewess among static covariates 
inspect_num(static_covs %>% select(-cell_ID)) %>%  
  inspectdf::show_plot(x = ., plot_layout = c(5, 5))

# --> remove elevation, small and medium cities 
static_covs <- static_covs %>% select(-c(elevation, cities_sm, cities_md))

# Correlation among annually varying covariates ---
# approach: sample random periods, look at correlated values 
period <- 40 #UPDATE THIS

period.column <- paste("X", period, sep="")
mat.list = list(crop, urban, gpw, gfc, precip, precseas, warmseas, temp, wdpa, evi)

df_covs <- data.frame(
  cell_ID = unique(static_covs$cell_ID),
  period = period) 

df_covs <- reduce(
  seq_along(mat.list),
  function(df, i) {
    mat_sub <- mat.list[[i]] %>%
      select(cell_ID, !!period.column) %>%
      rename(!!paste0("cov", i) := !!period.column)
    left_join(df, mat_sub, by = "cell_ID")
  },
  .init = df_covs
)
names(df_covs)[-(1:2)] <- c("crop", "urban", "gpw", "gfc", "precip", "precseas", "warmseas", "temp", "wdpa", "evi")
head(df_covs)

# Correlation among annual covariates for period X
correlation::correlation(df_covs[,c(3:length(df_covs))], 
                         include_factors = TRUE, 
                         method = "spearman",
                         use = "pairwise.complete.obs")
rcorr(as.matrix(df_covs[,c(3:length(df_covs))])) 

pairs(df_covs[,c(3:length(df_covs))])

cor_val <- cor(df_covs %>% select(-c(cell_ID, period)) %>% drop_na())
corrplot(cor_val, method = "number", type = "upper", diag = FALSE, mar = c(1, 1, 1, 1))

cor_val %>% GGally::ggpairs(upper=list(continuous='points'), lower=list(continuous='cor'))

# Skewess among annual covariates for period X
inspect_num(df_covs %>% select(-c(cell_ID, period))) %>%  
  inspectdf::show_plot(x = ., plot_layout = c(5, 5))
  
# --> drop urban, precip, warmseas precip? 
mat.list = list(crop, gpw, gfc, precseas, temp, wdpa, evi)

# Correlation between static and annual covariates --- 
# approach: sample random periods, look at correlated values 
period <- 40 #UPDATE THIS
period.column <- paste("X", period, sep="")

df_covs <- data.frame(
  cell_ID = unique(static_covs$cell_ID),
  period = period) 

df_covs <- reduce(
  seq_along(mat.list),
  function(df, i) {
    mat_sub <- mat.list[[i]] %>%
      select(cell_ID, !!period.column) %>%
      rename(!!paste0("cov", i) := !!period.column)
    left_join(df, mat_sub, by = "cell_ID")
  },
  .init = df_covs
)
names(df_covs)[-(1:2)] <- c("crop", "gpw", "gfc", "precseas", "temp", "wdpa", "evi")
df_covs <- merge(df_covs, static_covs, by="cell_ID")

# Correlation among all covariates for period X
correlation::correlation(df_covs[,c(3:length(df_covs))], 
                         include_factors = TRUE, 
                         method = "spearman",
                         use = "pairwise.complete.obs")
rcorr(as.matrix(df_covs[,c(3:length(df_covs))])) 

pairs(df_covs[,c(3:length(df_covs))])

cor_val <- cor(df_covs %>% select(-c(cell_ID, period)) %>% drop_na())
corrplot(cor_val, method = "number", type = "upper", diag = FALSE, mar = c(1, 1, 1, 1))

cor_val %>% GGally::ggpairs(upper=list(continuous='points'), lower=list(continuous='cor'))

# Skewess among annual covariates for period X
inspect_num(df_covs %>% select(-c(cell_ID, period))) %>%  
  inspectdf::show_plot(x = ., plot_layout = c(5, 5))

# --> evi correlated with a few, but seems important to include; drop temp instead? (more skewed) 
# could also consider (down the road) dropping coeff_var, but for now, remove temp 

## final covs for inclusion: 
# static: road_dist, tri, river_dist, cities_lg, coeff_var
# dynamic: crop, gpw, gfc, precseas, wdpa, evi
